{
	"electronegativityDescription": "Electronegativity is a tool to identify misconfigurations and security anti-patterns in Electron applications.",
	"inputOption": "-i, --input <path>",
	"inputOptionDescription": "input [directory | .js | .html | .asar]",
	"checksOption": "-l, --checks <checkNames>",
	"checksOptionDescription": "only run the specified checks list, passed in csv format",
	"excludeChecksOption": "-x, --exclude-checks <excludedCheckNames>",
	"excludeChecksOptionDescription": "skip the specified checks list, passed in csv format",
	"severityOption": "-s, --severity <severitySet>",
	"severityOptionDescription": "only return findings with the specified level of severity or above",
	"confidenceOption": "-c, --confidence <confidenceSet>",
	"confidenceOptionDescription": "only return findings with the specified level of confidence or above",
	"outputOption": "-o, --output <filename[.csv | .sarif]>",
	"outputOptionDescription": "save the results to a file in csv or sarif format",
	"relativeOption": "-r, --relative",
	"relativeOptionDescription": "show relative path for files",
	"verboseOption": "-v, --verbose <bool>",
	"verboseOptionDescription": "show the description for the findings, defaults to true",
	"upgradeOption": "-u, --upgrade <current version..target version>",
	"upgradeOptionDescription": "run Electron upgrade checks, eg -u 7..8",
	"electronVersionOption": "-e, --electron-version <version>",
	"electronVersionOptionDescription": "assume the set Electron version, overriding the detected one, eg -e 7.0.0 to treat as using Electron 7",
	"parserPluginsOption": "-p, --parser-plugins <plugins>",
	"parserPluginsOptionDescription": "specify additional parser plugins to use separated by commas, e.g. -p optionalChaining",
	"electroNgUrl": "https://doyensec.com/",
	"tryElectroNg": "Need something more powerful or updated? Try ElectroNG at get-electrong.com...\n",
	"contactUs": "Have a question? Contact us at: info@doyensec.com\n",
	"foundBug": "Found a bug? Please open an issue: https://github.com/doyensec/electronegativity/issues\n",
	"electronVer": "Electron version: ",
	"electronNotDetected": "not detected",
	"startScan": "Starting scan...\n",
	"scanComplete": "Scan completed!",
	"findingFound": "findings found",
	"noFindingsFound": "No findings found.",
	"fileFormatError": "Please specify file format extension.",
	"errorWhileScanning": "Error while scanning.",
	"electronVersionError": "Couldn't detect Electron version, assuming v0.1.0. Defaults have probably changed for your actual version, please check manually.",
	"severityLevelError": "This severity level does not exist!",
	"confidenceLevelError": "This confidence level does not exist!",
	"tableCheckId": "Check ID",
	"tableAffectedFile": "Affected File",
	"tableLocation": "Location",
	"tableDescription": "Issue Description",
	"numberOfChecksLoaded": "{{{total}}} check(s) successfully loaded: {{{globalChecks}}} global, {{{atomicChecks}}} atomic",
	"tolerableErrorParsing": "Tolerable error parsing {{{file}}} - {{{message}}}",
	"errorParsing": "Error parsing {{{file}}} - {{{message}}}",
	"reviewRequired": "Review Required",
	"noIssuesFound": "No issues were found.",
	"tryElectroNg": "Would you like more precise or updated results? Try ElectroNG (https://electro.ng) today, the professional alternative to Electronegativity.",
	"BROWSER_WINDOW_WEB_PREFERENCES_DEPRECATION": "(ELECTRON 5) The BrowserWindow API's webPreferences option default values are deprecated in favor of the new defaults.",
	"NATIVE_WINDOW_OPEN_CHANGE": "(ELECTRON 5) Child windows opened with the nativeWindowOpen option will always have Node.js integration disabled.",
	"PRIVILEGED_SCHEMES_REGISTRATION_REMOVAL": "(ELECTRON 5) The APIs for Privileged Schemes Registration have been removed in favor of protocol.registerSchemesAsPrivileged.",
	"SET_SPELLCHECK_PROVIDER_DEPRECATION": "(ELECTRON 5) The spellCheck callback on webFrame.setSpellCheckProvider is now asynchronous, and autoCorrectWord parameter has been removed.",
	"WEB_FRAME_ISOLATED_WORLD_DEPRECATION": "(ELECTRON 5) The webFrame isolated world APIs have been deprecated in favor of webFrame.setIsolatedWorldInfo",
	"CONTENT_TRACING_GET_TRACE_BUFFER_USAGE_DEPRECATION": "(ELECTRON 6) Calling contentTracing.getTraceBufferUsage() with a callback is deprecated.",
	"ENABLE_MIXED_SANDBOX_DEPRECATION": "(ELECTRON 6) The app.enableMixedSandbox API has been deprecated since mixed-sandbox mode is now enabled by default.",
	"QUERY_SYSTEM_IDLE_STATE_DEPRECATION": "(ELECTRON 6) The powerMonitor.querySystemIdleState API has been deprecated.",
	"QUERY_SYSTEM_IDLE_TIME_DEPRECATION": "(ELECTRON 6) The powerMonitor.querySystemIdleTime API has been deprecated.",
	"REQUIRE_ELECTRON_SCREEN_DEPRECATION": "(ELECTRON 6) require('electron').screen in the renderer process is deprecated.",
	"REQUIRE_SANDBOXED_RENDERERS_DEPRECATION": "(ELECTRON 6) Certain requires in sandboxed renderers are deprecated.",
	"SET_HIGHLIGHT_MODE_DEPRECATION": "(ELECTRON 6) The tray.setHighlightMode API has been deprecated.",
	"SET_NULL_MENU_DEPRECATION": "(ELECTRON 6) Calling win.setMenu(null) to remove a menu has been deprecated in favor of win.removeMenu().",
	"CLEAR_AUTH_CACHE_DEPRECATION": "(ELECTRON 7) The session.clearAuthCache API no longer accepts options for what to clear, and instead unconditionally clears the whole cache.",
	"CONTENT_TRACING_GET_TRACE_BUFFER_USAGE_REMOVAL": "(ELECTRON 7) Calling contentTracing.getTraceBufferUsage() with a callback has been removed.",
	"ENABLE_MIXED_SANDBOX_REMOVAL": "(ELECTRON 7) The app.enableMixedSandbox API has been removed since mixed-sandbox mode is now enabled by default.",
	"QUERY_SYSTEM_IDLE_STATE_REMOVAL": "(ELECTRON 7) The powerMonitor.querySystemIdleState API has been replaced with the synchronous API powerMonitor.getSystemIdleState.",
	"QUERY_SYSTEM_IDLE_TIME_REMOVAL": "(ELECTRON 7) The powerMonitor.querySystemIdleTime API has been replaced with the synchronous API powerMonitor.getSystemIdleTime.",
	"SET_HIGHLIGHT_MODE_REMOVAL": "(ELECTRON 7) The tray.setHighlightMode API has been removed.",
	"WEB_FRAME_ISOLATED_WORLD_REMOVAL": "(ELECTRON 7) The webFrame isolated world APIs have been removed in favor of webFrame.setIsolatedWorldInfo",
	"WEBKITDIRECTORY_CHANGE": "Fixed webkitdirectory to return list of files if a folder is selected.",
	"ALLOW_RENDERER_PROCESS_REUSE_DEPRECATION": "(ELECTRON 8) The default value of false for app.allowRendererProcessReuse is deprecated",
	"GET_COLOR_DEPRECATION": "(ELECTRON 8) The color alternate-selected-control-text on systemPreferences.getColor(color) is deprecated",
	"GET_WEB_CONTENTS_DEPRECATION": "(ELECTRON 8) getWebContents is deprecated on the <webview> tag.",
	"IPC_SEND_STRUCTURED_CLONE_ALGORITHM": "(ELECTRON 8) Values sent over IPC are now serialized with Structured Clone Algorithm.",
	"SET_ZOOM_LEVEL_LIMITS_DEPRECATION": "(ELECTRON 8) setLayoutZoomLevelLimits is deprecated on webContents, webFrame, and the <webview> tag because Chromium removed this capability.",
	"VISIBLE_ON_FULLSCREEN_DEPRECATION": "(ELECTRON 8) The option visibleOnFullScreen on BrowserWindow.setVisibleOnAllWorkspaces is deprecated",
	"AFFINITY_HTML_CHECK": "Review the use of affinity property",
	"AFFINITY_JS_CHECK": "Review the use of affinity property",
	"ALLOWPOPUPS_HTML_CHECK": "Do not allow popups in webview",
	"AUXCLICK_HTML_CHECK": "Limit navigation flows to untrusted origins. Middle-click may cause Electron to open a link within a new window",
	"AUXCLICK_JS_CHECK": "Limit navigation flows to untrusted origins. Middle-click may cause Electron to open a link within a new window",
	"BLINK_FEATURES_HTML_CHECK": "Do not use Chromium's experimental features",
	"BLINK_FEATURES_JS_CHECK": "Do not use Chromiumâ€™s experimental features",
	"CERTIFICATE_ERROR_EVENT_JS_CHECK": "Do not allow insecure connections, by explicitly opting-out from TLS validation",
	"CERTIFICATE_VERIFY_PROC_JS_CHECK": "Do not allow insecure connections, by explicitly opting-out from TLS validation or importing untrusted certificates",
	"CONTEXT_ISOLATION_JS_CHECK": "Review the use of the contextIsolation option",
	"CSP_HTML_CHECK": "A CSP is set for this page using a meta tag",
	"CSP_JS_CHECK": "Check for common responseHeaders CSP assignments",
	"CUSTOM_ARGUMENTS_JS_CHECK": "Review the use of custom command line arguments",
	"CUSTOM_ARGUMENTS_JSON_CHECK": "Search for dangerous runtime flags in the package.json file.",
	"DANGEROUS_FUNCTIONS_JS_CHECK": "Do not use insertCSS, executeJavaScript, eval, Function, setTimeout, setInterval, setImmediate with user-supplied content",
	"ELECTRON_VERSION_JSON_CHECK": "Gets the electron version used by inspecting the package.json file.",
	"EXPERIMENTAL_FEATURES_HTML_CHECK": "Do not use Chromium's experimental features",
	"EXPERIMENTAL_FEATURES_JS_CHECK": "Do not use Chromium's experimental features",
	"HTTP_RESOURCES_HTML_CHECK": "Do not allow insecure HTTP connections",
	"HTTP_RESOURCES_JS_CHECK": "Do not allow insecure HTTP connections",
	"INSECURE_CONTENT_HTML_CHECK": "Do not allow insecure HTTP connections",
	"INSECURE_CONTENT_JS_CHECK": "Do not allow insecure HTTP connections",
	"LIMIT_NAVIGATION_JS_CHECK": "Evaluate the implementation of the custom callback in the .on new-window and will-navigate events",
	"NODE_INTEGRATION_ATTACH_EVENT_JS_CHECK": "Disable nodeIntegration for untrusted origins",
	"NODE_INTEGRATION_HTML_CHECK": "Disable nodeIntegration for untrusted origins",
	"NODE_INTEGRATION_JS_CHECK": "Disable nodeIntegration for untrusted origins",
	"OPEN_EXTERNAL_JS_CHECK": "Review the use of openExternal",
	"PERMISSION_REQUEST_HANDLER_JS_CHECK": "Evaluate the implementation of the custom callback in setPermissionRequestHandler",
	"PRELOAD_JS_CHECK": "Review the use of preload scripts",
	"PROTOCOL_HANDLER_JS_CHECK": "Review the use of custom protocol handlers",
	"REMOTE_MODULE_JS_CHECK": "Disable the remote module",
	"SANDBOX_JS_CHECK": "Use sandbox for untrusted origins",
	"SECURITY_WARNINGS_DISABLED_JS_CHECK": "Warns about flags disabling security warnings in the sources.",
	"SECURITY_WARNINGS_DISABLED_JSON_CHECK": "Warns about flags disabling security warnings in the package.json file.",
	"WEB_SECURITY_HTML_CHECK": "Do not use disablewebsecurity",
	"WEB_SECURITY_JS_CHECK": "Do not use disablewebsecurity",
	"AFFINITY_GLOBAL_CHECK_AFFINITY_FOUND": "Two or more rendereres are running with the same affinity property. Manual review is required since we don't check for the webPreferences.",
	"ALLOW_RENDERER_PROCESS_REUSE_GLOBAL_DEPRECATION":"(ELECTRON 8) The default value of app.allowRendererProcessReuse is deprecated, it is currently false.  It will changed to be true in Electron 9.",
	"AVAILABLE_SECURITY_FIXES_GLOBAL_CHECK_SECURITY_ISSUES":"Check if there are security patches applied in between the Electron version used and the latest",
	"AVAILABLE_SECURITY_FIXES_GLOBAL_CHECK_OUTDATED_VERSION":"A new version of Electron is available",
	"CSP_GLOBAL_CHECK_NO_CSP":"No CSP has been detected in the target application",
	"CSP_GLOBAL_CHECK_MAYBE_WEAK_CSP":"One or more CSP directives detected seems to be vulnerable",
	"CSP_GLOBAL_CHECK_WEAK_CSP":"One or more CSP directives detected are vulnerable",
	"CSP_GLOBAL_CHECK_INVALID_CSP":"Failed to parse CSP, it may not be valid.",
	"HTTP_RESOURCES_WITH_NODE_INTEGRATION_GLOBAL_CHECK":"The nodeIntegration flag is enabled for the application, but some resources are loaded over an unencrypted connection.",
	"LIMIT_NAVIGATION_GLOBAL_CHECK_NONE_FOUND":"Missing navigation limits using .on new-window and will-navigate events",
	"LIMIT_NAVIGATION_GLOBAL_CHECK_NEW_WINDOW_MISSING":"Missing .on new-window navigation limit",
	"LIMIT_NAVIGATION_GLOBAL_CHECK_WILL_NAVIGATE_MISSING":"Missing .on will-navigate navigation limit",
	"PERMISSION_REQUEST_HANDLER_GLOBAL_CHECK":"Missing PermissionRequestHandler to limit specific permissions (e.g. openExternal) in response to events from particular origins.",
}